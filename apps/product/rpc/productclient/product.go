// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: product.proto

package productclient

import (
	"context"

	"github.com/csd-admin664/go_zero_study/apps/product/rpc/product"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ProductInfoRequest  = product.ProductInfoRequest
	ProductInfoResponse = product.ProductInfoResponse
	ProductItem         = product.ProductItem
	ProductRequest      = product.ProductRequest
	ProductResponse     = product.ProductResponse

	Product interface {
		Products(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		ProductInfo(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*ProductItem, error)
	}

	defaultProduct struct {
		cli zrpc.Client
	}
)

func NewProduct(cli zrpc.Client) Product {
	return &defaultProduct{
		cli: cli,
	}
}

func (m *defaultProduct) Products(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.Products(ctx, in, opts...)
}

func (m *defaultProduct) ProductInfo(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*ProductItem, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.ProductInfo(ctx, in, opts...)
}
